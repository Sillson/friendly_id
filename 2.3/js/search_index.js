var search_data = {"index":{"searchIndex":["activerecord","base","array","author","block","book","city","country","createslugs","createsupportmodels","district","event","faker","friendlyid","activerecord2","configuration","deprecatedslugmethods","finders","finderproxy","multiple","simplemodel","deprecatedmethods","findermethods","multiplefinder","simplefinder","singlefinder","sluggedmodel","cachedmultiplefinder","cachedsinglefinder","deprecatedmethods","findermethods","multiplefinder","singlefinder","sluggedfinder","base","blankerror","configuration","finders","base","single","reservederror","sluggenerationerror","slugstring","slugged","model","status","status","taskrunner","test","activerecord2","basicsluggedmodeltest","cachedslugtest","core","customnormalizertest","customtablenametest","deprecatedtest","simple","basictest","simpletest","statustest","slugged","statustest","stitest","customnormalizer","friendlyidtest","generic","scopedmodeltest","slugstringtest","slugtest","slugged","sluggedstatus","status","version","friendlyidgenerator","house","novel","object","person","place","post","question","resident","rubyprof","slug","string","taskstest","user","yaml","add_options!()","approximate_ascii!()","best?()","best?()","best_id()","best_id()","cache_column()","cache_column=()","cache_column?()","cache_finders?()","cached_slug()","clean!()","column()","column()","column()","create_method()","create_method()","current?()","current?()","custom_cache_column?()","days=()","delete_all_method()","delete_old_slugs()","delete_slugs()","down()","down()","downcase!()","dump_approximations()","find()","find()","find()","find()","find()","find()","find_method()","find_method()","find_one()","find_one()","find_slug()","find_slug()","find_some()","find_some()","finder_slug()","found_using_friendly_id?()","found_using_friendly_id?()","found_using_numeric_id?()","found_using_numeric_id?()","found_using_outdated_friendly_id?()","friendly?()","friendly?()","friendly?()","friendly?()","friendly_id()","friendly_id()","friendly_id=()","friendly_id_config()","friendly_id_status()","friendly_id_status()","get_id()","handle_friendly_result()","has_a_slug?()","has_better_id?()","has_better_id?()","has_friendly_id()","has_friendly_id()","included()","included()","instance()","instance()","instance()","instance()","instance()","is_most_recent?()","klass()","klass()","klass()","klass()","klass()","klass()","klass()","klass()","klass()","klass()","klass=()","make_slugs()","manifest()","method_missing()","method_missing()","method_missing()","new()","new()","new()","new()","new()","new()","new()","normalize()","normalize!()","normalize_for!()","normalize_friendly_id()","normalize_friendly_id()","normalizer=()","numeric?()","other_class()","other_class()","other_class()","other_class()","outdated?()","outdated?()","parse()","parse_friendly_id()","primary_key()","rand()","reserved=()","reserved?()","reserved_error_message()","reserved_words=()","save_method()","scope_for()","scopes_over?()","setup()","setup()","should()","slug()","slug=()","slug?()","slugs_included?()","status()","status()","strip_diacritics()","strip_diacritics=()","strip_non_ascii()","teardown()","teardown()","teardown()","teardown()","teardown()","test()","to_ascii!()","to_friendly_id()","to_param()","to_param()","truncate!()","unfriendly?()","unfriendly?()","up()","up()","upcase!()","uses_friendly_id?()","validate_find_options()","validate_for!()","validate_name()","validate_uses_slugs()","validation_exceptions()","validation_exceptions()","with_dashes!()","word_chars!()","changelog","contributors","gemfile","guide","license","readme","rakefile","readme","friendly_id.gemspec","friendly_id.rake"],"longSearchIndex":["activerecord","activerecord::base","array","author","block","book","city","country","createslugs","createsupportmodels","district","event","faker","friendlyid","friendlyid::activerecord2","friendlyid::activerecord2::configuration","friendlyid::activerecord2::deprecatedslugmethods","friendlyid::activerecord2::finders","friendlyid::activerecord2::finders::finderproxy","friendlyid::activerecord2::finders::multiple","friendlyid::activerecord2::simplemodel","friendlyid::activerecord2::simplemodel::deprecatedmethods","friendlyid::activerecord2::simplemodel::findermethods","friendlyid::activerecord2::simplemodel::multiplefinder","friendlyid::activerecord2::simplemodel::simplefinder","friendlyid::activerecord2::simplemodel::singlefinder","friendlyid::activerecord2::sluggedmodel","friendlyid::activerecord2::sluggedmodel::cachedmultiplefinder","friendlyid::activerecord2::sluggedmodel::cachedsinglefinder","friendlyid::activerecord2::sluggedmodel::deprecatedmethods","friendlyid::activerecord2::sluggedmodel::findermethods","friendlyid::activerecord2::sluggedmodel::multiplefinder","friendlyid::activerecord2::sluggedmodel::singlefinder","friendlyid::activerecord2::sluggedmodel::sluggedfinder","friendlyid::base","friendlyid::blankerror","friendlyid::configuration","friendlyid::finders","friendlyid::finders::base","friendlyid::finders::single","friendlyid::reservederror","friendlyid::sluggenerationerror","friendlyid::slugstring","friendlyid::slugged","friendlyid::slugged::model","friendlyid::slugged::status","friendlyid::status","friendlyid::taskrunner","friendlyid::test","friendlyid::test::activerecord2","friendlyid::test::activerecord2::basicsluggedmodeltest","friendlyid::test::activerecord2::cachedslugtest","friendlyid::test::activerecord2::core","friendlyid::test::activerecord2::customnormalizertest","friendlyid::test::activerecord2::customtablenametest","friendlyid::test::activerecord2::deprecatedtest","friendlyid::test::activerecord2::simple","friendlyid::test::activerecord2::simple::basictest","friendlyid::test::activerecord2::simple::simpletest","friendlyid::test::activerecord2::simple::statustest","friendlyid::test::activerecord2::slugged","friendlyid::test::activerecord2::statustest","friendlyid::test::activerecord2::stitest","friendlyid::test::customnormalizer","friendlyid::test::friendlyidtest","friendlyid::test::generic","friendlyid::test::scopedmodeltest","friendlyid::test::slugstringtest","friendlyid::test::slugtest","friendlyid::test::slugged","friendlyid::test::sluggedstatus","friendlyid::test::status","friendlyid::version","friendlyidgenerator","house","novel","object","person","place","post","question","resident","rubyprof","slug","string","taskstest","user","yaml","friendlyidgenerator#add_options!()","friendlyid::slugstring#approximate_ascii!()","friendlyid::slugged::status#best?()","friendlyid::status#best?()","friendlyid::activerecord2::simplemodel#best_id()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#best_id()","friendlyid::test::activerecord2::cachedslugtest#cache_column()","friendlyid::activerecord2::configuration#cache_column=()","friendlyid::activerecord2::configuration#cache_column?()","friendlyid::activerecord2::configuration#cache_finders?()","friendlyid::test::activerecord2::cachedslugtest#cached_slug()","friendlyid::slugstring#clean!()","friendlyid::activerecord2::simplemodel::simplefinder#column()","friendlyid::activerecord2::sluggedmodel::cachedmultiplefinder#column()","friendlyid::activerecord2::sluggedmodel::cachedsinglefinder#column()","friendlyid::test::activerecord2::core#create_method()","friendlyid::test::generic#create_method()","friendlyid::slugged::status#current?()","slug#current?()","friendlyid::activerecord2::configuration#custom_cache_column?()","friendlyid::taskrunner#days=()","friendlyid::test::activerecord2::core#delete_all_method()","friendlyid::taskrunner#delete_old_slugs()","friendlyid::taskrunner#delete_slugs()","createslugs::down()","createsupportmodels::down()","friendlyid::slugstring#downcase!()","friendlyid::slugstring::dump_approximations()","friendlyid::activerecord2::simplemodel::multiplefinder#find()","friendlyid::activerecord2::simplemodel::singlefinder#find()","friendlyid::activerecord2::sluggedmodel::cachedsinglefinder#find()","friendlyid::activerecord2::sluggedmodel::multiplefinder#find()","friendlyid::activerecord2::sluggedmodel::singlefinder#find()","friendlyid::finders::base#find()","friendlyid::test::activerecord2::core#find_method()","friendlyid::test::generic#find_method()","friendlyid::activerecord2::simplemodel::findermethods#find_one()","friendlyid::activerecord2::sluggedmodel::findermethods#find_one()","friendlyid::activerecord2::sluggedmodel#find_slug()","friendlyid::slugged::model#find_slug()","friendlyid::activerecord2::simplemodel::findermethods#find_some()","friendlyid::activerecord2::sluggedmodel::findermethods#find_some()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#finder_slug()","friendlyid::activerecord2::simplemodel::deprecatedmethods#found_using_friendly_id?()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#found_using_friendly_id?()","friendlyid::activerecord2::simplemodel::deprecatedmethods#found_using_numeric_id?()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#found_using_numeric_id?()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#found_using_outdated_friendly_id?()","friendlyid::finders::base::friendly?()","friendlyid::finders::single#friendly?()","friendlyid::slugged::status#friendly?()","friendlyid::status#friendly?()","friendlyid::activerecord2::simplemodel#friendly_id()","friendlyid::slugged::model#friendly_id()","friendlyid::slugged::status#friendly_id=()","friendlyid::slugged::model#friendly_id_config()","friendlyid::activerecord2::simplemodel#friendly_id_status()","friendlyid::slugged::model#friendly_id_status()","object#get_id()","friendlyid::activerecord2::sluggedmodel::sluggedfinder#handle_friendly_result()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#has_a_slug?()","friendlyid::activerecord2::simplemodel::deprecatedmethods#has_better_id?()","friendlyid::activerecord2::sluggedmodel::deprecatedmethods#has_better_id?()","friendlyid::activerecord2#has_friendly_id()","friendlyid::base#has_friendly_id()","friendlyid::activerecord2::simplemodel::included()","friendlyid::activerecord2::sluggedmodel::included()","friendlyid::test::activerecord2::simple::simpletest#instance()","friendlyid::test::activerecord2::slugged#instance()","friendlyid::test::activerecord2::statustest#instance()","friendlyid::test::generic#instance()","friendlyid::test::sluggedstatus#instance()","slug#is_most_recent?()","friendlyid::test::activerecord2::cachedslugtest#klass()","friendlyid::test::activerecord2::customnormalizertest#klass()","friendlyid::test::activerecord2::customtablenametest#klass()","friendlyid::test::activerecord2::deprecatedtest#klass()","friendlyid::test::activerecord2::simple::simpletest#klass()","friendlyid::test::activerecord2::slugged#klass()","friendlyid::test::activerecord2::statustest#klass()","friendlyid::test::activerecord2::stitest#klass()","friendlyid::test::generic#klass()","friendlyid::test::sluggedstatus#klass()","friendlyid::taskrunner#klass=()","friendlyid::taskrunner#make_slugs()","friendlyidgenerator#manifest()","friendlyid::activerecord2::finders::finderproxy#method_missing()","friendlyid::finders::base#method_missing()","friendlyid::taskrunner#method_missing()","friendlyid::activerecord2::finders::finderproxy::new()","friendlyid::activerecord2::finders::multiple::new()","friendlyid::configuration::new()","friendlyid::finders::base::new()","friendlyid::slugstring::new()","friendlyid::status::new()","friendlyid::taskrunner::new()","friendlyid::activerecord2::deprecatedslugmethods#normalize()","friendlyid::slugstring#normalize!()","friendlyid::slugstring#normalize_for!()","friendlyid::slugged::model#normalize_friendly_id()","person#normalize_friendly_id()","friendlyid::configuration#normalizer=()","friendlyid::status#numeric?()","friendlyid::test::activerecord2::cachedslugtest#other_class()","friendlyid::test::activerecord2::simple::simpletest#other_class()","friendlyid::test::activerecord2::slugged#other_class()","friendlyid::test::generic#other_class()","friendlyid::slugged::status#outdated?()","slug#outdated?()","friendlyid::activerecord2::deprecatedslugmethods#parse()","string#parse_friendly_id()","friendlyid::activerecord2::simplemodel::simplefinder#primary_key()","array#rand()","friendlyid::configuration#reserved=()","friendlyid::configuration#reserved?()","friendlyid::configuration#reserved_error_message()","friendlyid::configuration#reserved_words=()","friendlyid::test::activerecord2::core#save_method()","friendlyid::activerecord2::configuration#scope_for()","friendlyid::activerecord2::configuration#scopes_over?()","friendlyid::test::generic#setup()","friendlyid::test::scopedmodeltest#setup()","object#should()","friendlyid::activerecord2::sluggedmodel#slug()","friendlyid::activerecord2::sluggedmodel#slug=()","friendlyid::slugged::model#slug?()","friendlyid::activerecord2::sluggedmodel::sluggedfinder#slugs_included?()","friendlyid::test::activerecord2::simple::statustest#status()","friendlyid::test::sluggedstatus#status()","friendlyid::activerecord2::deprecatedslugmethods#strip_diacritics()","friendlyid::configuration#strip_diacritics=()","friendlyid::activerecord2::deprecatedslugmethods#strip_non_ascii()","friendlyid::test::activerecord2::core#teardown()","friendlyid::test::generic#teardown()","friendlyid::test::scopedmodeltest#teardown()","friendlyid::test::slugtest#teardown()","taskstest#teardown()","object#test()","friendlyid::slugstring#to_ascii!()","slug#to_friendly_id()","friendlyid::activerecord2::simplemodel#to_param()","friendlyid::activerecord2::sluggedmodel#to_param()","friendlyid::slugstring#truncate!()","friendlyid::finders::base::unfriendly?()","friendlyid::finders::single#unfriendly?()","createslugs::up()","createsupportmodels::up()","friendlyid::slugstring#upcase!()","friendlyid::base#uses_friendly_id?()","friendlyid::activerecord2::sluggedmodel::findermethods#validate_find_options()","friendlyid::slugstring#validate_for!()","slug#validate_name()","friendlyid::taskrunner#validate_uses_slugs()","friendlyid::test::activerecord2::core#validation_exceptions()","friendlyid::test::generic#validation_exceptions()","friendlyid::slugstring#with_dashes!()","friendlyid::slugstring#word_chars!()","","","","","","","","","",""],"info":[["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","",""],["Array","","Array.html","",""],["Author","","Author.html","","<p>Another model that doesn“t use slugs\n"],["Block","","Block.html","","<p>A model using the deprecated block syntax\n"],["Book","","Book.html","","<p>A base model for single table inheritence\n"],["City","","City.html","","<p>A model that specifies a custom cached slug column\n"],["Country","","Country.html","","<p>A slugged model used as a scope\n"],["CreateSlugs","","CreateSlugs.html","",""],["CreateSupportModels","","CreateSupportModels.html","",""],["District","","District.html","","<p>A model that uses the automagically configured “cached_slug” column\n"],["Event","","Event.html","","<p>A model that uses a datetime field for its friendly_id\n"],["Faker","","Faker.html","",""],["FriendlyId","","FriendlyId.html","","<p>FriendlyId is a comprehensive Ruby library for slugging and permalinks with\nActiveRecord. @author Norman …\n"],["FriendlyId::ActiveRecord2","","FriendlyId/ActiveRecord2.html","","<p>The adapter for Ruby on Rails&#39;s ActiveRecord. Compatible with AR 2.2.x\n- 2.3.x.\n"],["FriendlyId::ActiveRecord2::Configuration","","FriendlyId/ActiveRecord2/Configuration.html","",""],["FriendlyId::ActiveRecord2::DeprecatedSlugMethods","","FriendlyId/ActiveRecord2/DeprecatedSlugMethods.html","",""],["FriendlyId::ActiveRecord2::Finders","","FriendlyId/ActiveRecord2/Finders.html","","<p>The classes in this module are used internally by FriendlyId, and exist\nlargely to avoid polluting the …\n"],["FriendlyId::ActiveRecord2::Finders::FinderProxy","","FriendlyId/ActiveRecord2/Finders/FinderProxy.html","","<p>FinderProxy is used to choose which finder class to instantiate; depending\non the model_class&#39;s  …\n"],["FriendlyId::ActiveRecord2::Finders::Multiple","","FriendlyId/ActiveRecord2/Finders/Multiple.html","","<p>Wraps finds for multiple records using an array of friendly_ids. @abstract\n"],["FriendlyId::ActiveRecord2::SimpleModel","","FriendlyId/ActiveRecord2/SimpleModel.html","",""],["FriendlyId::ActiveRecord2::SimpleModel::DeprecatedMethods","","FriendlyId/ActiveRecord2/SimpleModel/DeprecatedMethods.html","","<p>These methods will be removed in FriendlyId 3.0.\n"],["FriendlyId::ActiveRecord2::SimpleModel::FinderMethods","","FriendlyId/ActiveRecord2/SimpleModel/FinderMethods.html","","<p>The methods in this module override ActiveRecord&#39;s\n<code>find_one</code> and <code>find_some</code> to add FriendlyId&#39;s …\n"],["FriendlyId::ActiveRecord2::SimpleModel::MultipleFinder","","FriendlyId/ActiveRecord2/SimpleModel/MultipleFinder.html","",""],["FriendlyId::ActiveRecord2::SimpleModel::SimpleFinder","","FriendlyId/ActiveRecord2/SimpleModel/SimpleFinder.html","","<p>Some basic methods common to {MultipleFinder} and {SingleFinder}.\n"],["FriendlyId::ActiveRecord2::SimpleModel::SingleFinder","","FriendlyId/ActiveRecord2/SimpleModel/SingleFinder.html","",""],["FriendlyId::ActiveRecord2::SluggedModel","","FriendlyId/ActiveRecord2/SluggedModel.html","",""],["FriendlyId::ActiveRecord2::SluggedModel::CachedMultipleFinder","","FriendlyId/ActiveRecord2/SluggedModel/CachedMultipleFinder.html","","<p>Performs a find a single friendly_id using the cached_slug column, if\navailable. This is significantly …\n"],["FriendlyId::ActiveRecord2::SluggedModel::CachedSingleFinder","","FriendlyId/ActiveRecord2/SluggedModel/CachedSingleFinder.html","","<p>Performs a find for multiple friendly_ids using the cached_slug column, if\navailable. This is significantly …\n"],["FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html","","<p>These methods will be removed in FriendlyId 3.0.\n"],["FriendlyId::ActiveRecord2::SluggedModel::FinderMethods","","FriendlyId/ActiveRecord2/SluggedModel/FinderMethods.html","","<p>The methods in this module override ActiveRecord&#39;s\n<code>find_one</code> and <code>find_some</code> to add FriendlyId&#39;s …\n"],["FriendlyId::ActiveRecord2::SluggedModel::MultipleFinder","","FriendlyId/ActiveRecord2/SluggedModel/MultipleFinder.html","",""],["FriendlyId::ActiveRecord2::SluggedModel::SingleFinder","","FriendlyId/ActiveRecord2/SluggedModel/SingleFinder.html","",""],["FriendlyId::ActiveRecord2::SluggedModel::SluggedFinder","","FriendlyId/ActiveRecord2/SluggedModel/SluggedFinder.html","",""],["FriendlyId::Base","","FriendlyId/Base.html","",""],["FriendlyId::BlankError","","FriendlyId/BlankError.html","","<p>Raised when the slug text is blank.\n"],["FriendlyId::Configuration","","FriendlyId/Configuration.html","","<p>This class is not intended to be used on its own, it is used internally by\n`has_friendly_id` to store …\n"],["FriendlyId::Finders","","FriendlyId/Finders.html","",""],["FriendlyId::Finders::Base","","FriendlyId/Finders/Base.html","",""],["FriendlyId::Finders::Single","","FriendlyId/Finders/Single.html","",""],["FriendlyId::ReservedError","","FriendlyId/ReservedError.html","","<p>Raised when the slug text is reserved.\n"],["FriendlyId::SlugGenerationError","","FriendlyId/SlugGenerationError.html","","<p>An error based on this class is raised when slug generation fails\n"],["FriendlyId::SlugString","","FriendlyId/SlugString.html","","<p>This class provides some string-manipulation methods specific to slugs. Its\nUnicode support is provided …\n"],["FriendlyId::Slugged","","FriendlyId/Slugged.html","",""],["FriendlyId::Slugged::Model","","FriendlyId/Slugged/Model.html","",""],["FriendlyId::Slugged::Status","","FriendlyId/Slugged/Status.html","",""],["FriendlyId::Status","","FriendlyId/Status.html","","<p>FriendlyId::Status presents information about the status of the id that was\nused to find the model.  …\n"],["FriendlyId::TaskRunner","","FriendlyId/TaskRunner.html","",""],["FriendlyId::Test","","FriendlyId/Test.html","",""],["FriendlyId::Test::ActiveRecord2","","FriendlyId/Test/ActiveRecord2.html","",""],["FriendlyId::Test::ActiveRecord2::BasicSluggedModelTest","","FriendlyId/Test/ActiveRecord2/BasicSluggedModelTest.html","",""],["FriendlyId::Test::ActiveRecord2::CachedSlugTest","","FriendlyId/Test/ActiveRecord2/CachedSlugTest.html","",""],["FriendlyId::Test::ActiveRecord2::Core","","FriendlyId/Test/ActiveRecord2/Core.html","",""],["FriendlyId::Test::ActiveRecord2::CustomNormalizerTest","","FriendlyId/Test/ActiveRecord2/CustomNormalizerTest.html","",""],["FriendlyId::Test::ActiveRecord2::CustomTableNameTest","","FriendlyId/Test/ActiveRecord2/CustomTableNameTest.html","",""],["FriendlyId::Test::ActiveRecord2::DeprecatedTest","","FriendlyId/Test/ActiveRecord2/DeprecatedTest.html","",""],["FriendlyId::Test::ActiveRecord2::Simple","","FriendlyId/Test/ActiveRecord2/Simple.html","",""],["FriendlyId::Test::ActiveRecord2::Simple::BasicTest","","FriendlyId/Test/ActiveRecord2/Simple/BasicTest.html","",""],["FriendlyId::Test::ActiveRecord2::Simple::SimpleTest","","FriendlyId/Test/ActiveRecord2/Simple/SimpleTest.html","",""],["FriendlyId::Test::ActiveRecord2::Simple::StatusTest","","FriendlyId/Test/ActiveRecord2/Simple/StatusTest.html","",""],["FriendlyId::Test::ActiveRecord2::Slugged","","FriendlyId/Test/ActiveRecord2/Slugged.html","",""],["FriendlyId::Test::ActiveRecord2::StatusTest","","FriendlyId/Test/ActiveRecord2/StatusTest.html","",""],["FriendlyId::Test::ActiveRecord2::StiTest","","FriendlyId/Test/ActiveRecord2/StiTest.html","",""],["FriendlyId::Test::CustomNormalizer","","FriendlyId/Test/CustomNormalizer.html","","<p>Tests for models to ensure that they properly implement using the\n<code>normalize_friendly_id</code> method to allow …\n"],["FriendlyId::Test::FriendlyIdTest","","FriendlyId/Test/FriendlyIdTest.html","",""],["FriendlyId::Test::Generic","","FriendlyId/Test/Generic.html","","<p>Tests for any model that implements FriendlyId. Any test that tests model\nfeatures should include this …\n"],["FriendlyId::Test::ScopedModelTest","","FriendlyId/Test/ScopedModelTest.html","",""],["FriendlyId::Test::SlugStringTest","","FriendlyId/Test/SlugStringTest.html","",""],["FriendlyId::Test::SlugTest","","FriendlyId/Test/SlugTest.html","",""],["FriendlyId::Test::Slugged","","FriendlyId/Test/Slugged.html","","<p>Tests for any model that implements slugs.\n"],["FriendlyId::Test::SluggedStatus","","FriendlyId/Test/SluggedStatus.html","","<p>Tests for FriendlyId::Status for a model that uses slugs.\n"],["FriendlyId::Test::Status","","FriendlyId/Test/Status.html","","<p>Tests for FriendlyId::Status.\n"],["FriendlyId::Version","","FriendlyId/Version.html","",""],["FriendlyIdGenerator","","FriendlyIdGenerator.html","",""],["House","","House.html","","<p>A model that uses a non-slugged model for its scope\n"],["Novel","","Novel.html","","<p>A model that uses STI\n"],["Object","","Object.html","",""],["Person","","Person.html","","<p>A model with a custom slug text normalizer\n"],["Place","","Place.html","","<p>Model that uses a custom table name\n"],["Post","","Post.html","","<p>A model that uses default slug settings and has a named scope\n"],["Question","","Question.html","","<p>A model with no table\n"],["Resident","","Resident.html","","<p>A slugged model that uses a scope\n"],["RubyProf","","RubyProf.html","",""],["Slug","","Slug.html","","<p>A Slug is a unique, human-friendly identifier for an ActiveRecord.\n"],["String","","String.html","",""],["TasksTest","","TasksTest.html","",""],["User","","User.html","","<p>A model that doesn“t use slugs\n"],["YAML","","YAML.html","",""],["add_options!","FriendlyIdGenerator","FriendlyIdGenerator.html#method-i-add_options-21","(opt)",""],["approximate_ascii!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-approximate_ascii-21","(*args)","<p>Approximate an ASCII string. This works only for Western strings using\ncharacters that are Roman-alphabet …\n"],["best?","FriendlyId::Slugged::Status","FriendlyId/Slugged/Status.html#method-i-best-3F","()","<p>Did the find operation use the best possible id? True if <code>id</code> is\nnumeric, but the model has no slug, or …\n"],["best?","FriendlyId::Status","FriendlyId/Status.html#method-i-best-3F","()","<p>Did the find operation use the best available id?\n"],["best_id","FriendlyId::ActiveRecord2::SimpleModel","FriendlyId/ActiveRecord2/SimpleModel.html#method-i-best_id","()",""],["best_id","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-best_id","()","<p>@deprecated Please use #to_param\n"],["cache_column","FriendlyId::Test::ActiveRecord2::CachedSlugTest","FriendlyId/Test/ActiveRecord2/CachedSlugTest.html#method-i-cache_column","()",""],["cache_column=","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-cache_column-3D","(cache_column)",""],["cache_column?","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-cache_column-3F","()",""],["cache_finders?","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-cache_finders-3F","()",""],["cached_slug","FriendlyId::Test::ActiveRecord2::CachedSlugTest","FriendlyId/Test/ActiveRecord2/CachedSlugTest.html#method-i-cached_slug","()",""],["clean!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-clean-21","()","<p>Removes leading and trailing spaces or dashses, and replaces multiple\nwhitespace characters with a single …\n"],["column","FriendlyId::ActiveRecord2::SimpleModel::SimpleFinder","FriendlyId/ActiveRecord2/SimpleModel/SimpleFinder.html#method-i-column","()","<p>The column used to store the friendly_id.\n"],["column","FriendlyId::ActiveRecord2::SluggedModel::CachedMultipleFinder","FriendlyId/ActiveRecord2/SluggedModel/CachedMultipleFinder.html#method-i-column","()","<p>The column used to store the cached slug.\n"],["column","FriendlyId::ActiveRecord2::SluggedModel::CachedSingleFinder","FriendlyId/ActiveRecord2/SluggedModel/CachedSingleFinder.html#method-i-column","()","<p>The column used to store the cached slug.\n"],["create_method","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-create_method","()",""],["create_method","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-create_method","()",""],["current?","FriendlyId::Slugged::Status","FriendlyId/Slugged/Status.html#method-i-current-3F","()","<p>Did the find operation use the current slug?\n"],["current?","Slug","Slug.html#method-i-current-3F","()","<p>Whether this slug is the most recent of its owner&#39;s slugs.\n"],["custom_cache_column?","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-custom_cache_column-3F","()",""],["days=","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-days-3D","(days)",""],["delete_all_method","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-delete_all_method","()",""],["delete_old_slugs","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-delete_old_slugs","()",""],["delete_slugs","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-delete_slugs","()",""],["down","CreateSlugs","CreateSlugs.html#method-c-down","()",""],["down","CreateSupportModels","CreateSupportModels.html#method-c-down","()",""],["downcase!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-downcase-21","()","<p>Lowercases the string. Note that this works for Unicode strings, though\nyour milage may vary with Greek …\n"],["dump_approximations","FriendlyId::SlugString","FriendlyId/SlugString.html#method-c-dump_approximations","()","<p>This method can be used by developers wishing to debug the {APPROXIMATIONS}\nhashes, which are written …\n"],["find","FriendlyId::ActiveRecord2::SimpleModel::MultipleFinder","FriendlyId/ActiveRecord2/SimpleModel/MultipleFinder.html#method-i-find","()",""],["find","FriendlyId::ActiveRecord2::SimpleModel::SingleFinder","FriendlyId/ActiveRecord2/SimpleModel/SingleFinder.html#method-i-find","()",""],["find","FriendlyId::ActiveRecord2::SluggedModel::CachedSingleFinder","FriendlyId/ActiveRecord2/SluggedModel/CachedSingleFinder.html#method-i-find","()",""],["find","FriendlyId::ActiveRecord2::SluggedModel::MultipleFinder","FriendlyId/ActiveRecord2/SluggedModel/MultipleFinder.html#method-i-find","()",""],["find","FriendlyId::ActiveRecord2::SluggedModel::SingleFinder","FriendlyId/ActiveRecord2/SluggedModel/SingleFinder.html#method-i-find","()",""],["find","FriendlyId::Finders::Base","FriendlyId/Finders/Base.html#method-i-find","()","<p>Perform the find.\n"],["find_method","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-find_method","()",""],["find_method","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-find_method","()",""],["find_one","FriendlyId::ActiveRecord2::SimpleModel::FinderMethods","FriendlyId/ActiveRecord2/SimpleModel/FinderMethods.html#method-i-find_one","(id, options)",""],["find_one","FriendlyId::ActiveRecord2::SluggedModel::FinderMethods","FriendlyId/ActiveRecord2/SluggedModel/FinderMethods.html#method-i-find_one","(id_or_name, options)",""],["find_slug","FriendlyId::ActiveRecord2::SluggedModel","FriendlyId/ActiveRecord2/SluggedModel.html#method-i-find_slug","(name, sequence)",""],["find_slug","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-find_slug","()",""],["find_some","FriendlyId::ActiveRecord2::SimpleModel::FinderMethods","FriendlyId/ActiveRecord2/SimpleModel/FinderMethods.html#method-i-find_some","(ids_and_names, options)",""],["find_some","FriendlyId::ActiveRecord2::SluggedModel::FinderMethods","FriendlyId/ActiveRecord2/SluggedModel/FinderMethods.html#method-i-find_some","(ids_and_names, options)",""],["finder_slug","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-finder_slug","()","<p>@deprecated Please use #friendly_id_status.slug.\n"],["found_using_friendly_id?","FriendlyId::ActiveRecord2::SimpleModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SimpleModel/DeprecatedMethods.html#method-i-found_using_friendly_id-3F","()","<p>Was the record found using one of its friendly ids? @deprecated Please use\n#friendly_id_status.friendly? …\n"],["found_using_friendly_id?","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-found_using_friendly_id-3F","()","<p>Was the record found using one of its friendly ids? @deprecated Please use\n#friendly_id_status.friendly? …\n"],["found_using_numeric_id?","FriendlyId::ActiveRecord2::SimpleModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SimpleModel/DeprecatedMethods.html#method-i-found_using_numeric_id-3F","()","<p>Was the record found using its numeric id? @deprecated Please use\n#friendly_id_status.numeric?\n"],["found_using_numeric_id?","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-found_using_numeric_id-3F","()","<p>Was the record found using its numeric id? @deprecated Please use\n#friendly_id_status.numeric?\n"],["found_using_outdated_friendly_id?","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-found_using_outdated_friendly_id-3F","()","<p>Was the record found using an old friendly id? @deprecated Please use\n#friendly_id_status.outdated?\n"],["friendly?","FriendlyId::Finders::Base","FriendlyId/Finders/Base.html#method-c-friendly-3F","(id)","<p>Is the id friendly or numeric? Not that the return value here is\n<code>false</code> if the <code>id</code> is definitely not friendly, …\n"],["friendly?","FriendlyId::Finders::Single","FriendlyId/Finders/Single.html#method-i-friendly-3F","()","<p>Is the id definitely friendly? @see Finder::friendly?\n"],["friendly?","FriendlyId::Slugged::Status","FriendlyId/Slugged/Status.html#method-i-friendly-3F","()","<p>Did the find operation use a friendly id?\n"],["friendly?","FriendlyId::Status","FriendlyId/Status.html#method-i-friendly-3F","()","<p>Did the find operation use a friendly id?\n"],["friendly_id","FriendlyId::ActiveRecord2::SimpleModel","FriendlyId/ActiveRecord2/SimpleModel.html#method-i-friendly_id","()","<p>Returns the friendly_id.\n"],["friendly_id","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-friendly_id","()","<p>The friendly id.\n"],["friendly_id=","FriendlyId::Slugged::Status","FriendlyId/Slugged/Status.html#method-i-friendly_id-3D","(friendly_id)",""],["friendly_id_config","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-friendly_id_config","()",""],["friendly_id_status","FriendlyId::ActiveRecord2::SimpleModel","FriendlyId/ActiveRecord2/SimpleModel.html#method-i-friendly_id_status","()","<p>Get the {FriendlyId::Status} after the find has been performed.\n"],["friendly_id_status","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-friendly_id_status","()","<p>Get the {FriendlyId::Status} after the find has been performed.\n"],["get_id","Object","Object.html#method-i-get_id","()",""],["handle_friendly_result","FriendlyId::ActiveRecord2::SluggedModel::SluggedFinder","FriendlyId/ActiveRecord2/SluggedModel/SluggedFinder.html#method-i-handle_friendly_result","()",""],["has_a_slug?","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-has_a_slug-3F","()","<p>@deprecated Please use #slug?\n"],["has_better_id?","FriendlyId::ActiveRecord2::SimpleModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SimpleModel/DeprecatedMethods.html#method-i-has_better_id-3F","()","<p>Was the record found using an old friendly id, or its numeric id?\n@deprecated Please use !#friendly_id_status.best? …\n"],["has_better_id?","FriendlyId::ActiveRecord2::SluggedModel::DeprecatedMethods","FriendlyId/ActiveRecord2/SluggedModel/DeprecatedMethods.html#method-i-has_better_id-3F","()","<p>Was the record found using an old friendly id, or its numeric id?\n@deprecated Please use !#friendly_id_status.best? …\n"],["has_friendly_id","FriendlyId::ActiveRecord2","FriendlyId/ActiveRecord2.html#method-i-has_friendly_id","(method, options = {}, &block)",""],["has_friendly_id","FriendlyId::Base","FriendlyId/Base.html#method-i-has_friendly_id","(method, options = {}, &block)","<p>Set up a model to use a friendly_id. This method accepts a hash with\n{FriendlyId::Configuration several …\n"],["included","FriendlyId::ActiveRecord2::SimpleModel","FriendlyId/ActiveRecord2/SimpleModel.html#method-c-included","(base)",""],["included","FriendlyId::ActiveRecord2::SluggedModel","FriendlyId/ActiveRecord2/SluggedModel.html#method-c-included","(base)",""],["instance","FriendlyId::Test::ActiveRecord2::Simple::SimpleTest","FriendlyId/Test/ActiveRecord2/Simple/SimpleTest.html#method-i-instance","()",""],["instance","FriendlyId::Test::ActiveRecord2::Slugged","FriendlyId/Test/ActiveRecord2/Slugged.html#method-i-instance","()",""],["instance","FriendlyId::Test::ActiveRecord2::StatusTest","FriendlyId/Test/ActiveRecord2/StatusTest.html#method-i-instance","()",""],["instance","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-instance","()",""],["instance","FriendlyId::Test::SluggedStatus","FriendlyId/Test/SluggedStatus.html#method-i-instance","()",""],["is_most_recent?","Slug","Slug.html#method-i-is_most_recent-3F","()","<p>@deprecated Please used Slug#current?\n"],["klass","FriendlyId::Test::ActiveRecord2::CachedSlugTest","FriendlyId/Test/ActiveRecord2/CachedSlugTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::CustomNormalizerTest","FriendlyId/Test/ActiveRecord2/CustomNormalizerTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::CustomTableNameTest","FriendlyId/Test/ActiveRecord2/CustomTableNameTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::DeprecatedTest","FriendlyId/Test/ActiveRecord2/DeprecatedTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::Simple::SimpleTest","FriendlyId/Test/ActiveRecord2/Simple/SimpleTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::Slugged","FriendlyId/Test/ActiveRecord2/Slugged.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::StatusTest","FriendlyId/Test/ActiveRecord2/StatusTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::ActiveRecord2::StiTest","FriendlyId/Test/ActiveRecord2/StiTest.html#method-i-klass","()",""],["klass","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-klass","()",""],["klass","FriendlyId::Test::SluggedStatus","FriendlyId/Test/SluggedStatus.html#method-i-klass","()",""],["klass=","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-klass-3D","(klass)",""],["make_slugs","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-make_slugs","()",""],["manifest","FriendlyIdGenerator","FriendlyIdGenerator.html#method-i-manifest","()",""],["method_missing","FriendlyId::ActiveRecord2::Finders::FinderProxy","FriendlyId/ActiveRecord2/Finders/FinderProxy.html#method-i-method_missing","(symbol, *args)",""],["method_missing","FriendlyId::Finders::Base","FriendlyId/Finders/Base.html#method-i-method_missing","(*args, &block)",""],["method_missing","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-method_missing","(*args)",""],["new","FriendlyId::ActiveRecord2::Finders::FinderProxy","FriendlyId/ActiveRecord2/Finders/FinderProxy.html#method-c-new","(ids, model_class, options={})",""],["new","FriendlyId::ActiveRecord2::Finders::Multiple","FriendlyId/ActiveRecord2/Finders/Multiple.html#method-c-new","(ids, model_class, options={})",""],["new","FriendlyId::Configuration","FriendlyId/Configuration.html#method-c-new","(configured_class, method, options = nil, &block)",""],["new","FriendlyId::Finders::Base","FriendlyId/Finders/Base.html#method-c-new","(ids, model_class, options={})",""],["new","FriendlyId::SlugString","FriendlyId/SlugString.html#method-c-new","(string)","<p>@param string [String] The string to use as the basis of the SlugString.\n"],["new","FriendlyId::Status","FriendlyId/Status.html#method-c-new","(options={})",""],["new","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-c-new","(&block)",""],["normalize","FriendlyId::ActiveRecord2::DeprecatedSlugMethods","FriendlyId/ActiveRecord2/DeprecatedSlugMethods.html#method-i-normalize","(slug_text)","<p>@deprecated Please use SlugString#normalize.\n"],["normalize!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-normalize-21","()","<p>Normalize the string for use as a FriendlyId. Note that in this context,\n<code>normalize</code> means, strip, remove …\n"],["normalize_for!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-normalize_for-21","(config)","<p>Normalize the string for a given {FriendlyId::Configuration}. @param config\n[FriendlyId::Configuration] …\n"],["normalize_friendly_id","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-normalize_friendly_id","(string)","<p>Clean up the string before setting it as the friendly_id. You can override\nthis method to add your own …\n"],["normalize_friendly_id","Person","Person.html#method-i-normalize_friendly_id","(string)",""],["normalizer=","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-normalizer-3D","(arg)",""],["numeric?","FriendlyId::Status","FriendlyId/Status.html#method-i-numeric-3F","()","<p>Did the find operation use a numeric id?\n"],["other_class","FriendlyId::Test::ActiveRecord2::CachedSlugTest","FriendlyId/Test/ActiveRecord2/CachedSlugTest.html#method-i-other_class","()",""],["other_class","FriendlyId::Test::ActiveRecord2::Simple::SimpleTest","FriendlyId/Test/ActiveRecord2/Simple/SimpleTest.html#method-i-other_class","()",""],["other_class","FriendlyId::Test::ActiveRecord2::Slugged","FriendlyId/Test/ActiveRecord2/Slugged.html#method-i-other_class","()",""],["other_class","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-other_class","()",""],["outdated?","FriendlyId::Slugged::Status","FriendlyId/Slugged/Status.html#method-i-outdated-3F","()","<p>Did the find operation use an outdated slug?\n"],["outdated?","Slug","Slug.html#method-i-outdated-3F","()",""],["parse","FriendlyId::ActiveRecord2::DeprecatedSlugMethods","FriendlyId/ActiveRecord2/DeprecatedSlugMethods.html#method-i-parse","(string)","<p>@deprecated Please use String#parse_friendly_id\n"],["parse_friendly_id","String","String.html#method-i-parse_friendly_id","(separator = nil)",""],["primary_key","FriendlyId::ActiveRecord2::SimpleModel::SimpleFinder","FriendlyId/ActiveRecord2/SimpleModel/SimpleFinder.html#method-i-primary_key","()","<p>The model&#39;s fully-qualified and quoted primary key.\n"],["rand","Array","Array.html#method-i-rand","()",""],["reserved=","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-reserved-3D","(*args)","<p>This method will be removed from FriendlyId 3.0. @deprecated Please use\n{#reserved_words reserved_words …\n"],["reserved?","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-reserved-3F","(word)",""],["reserved_error_message","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-reserved_error_message","(word)",""],["reserved_words=","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-reserved_words-3D","(*words)",""],["save_method","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-save_method","()",""],["scope_for","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-scope_for","(record)",""],["scopes_over?","FriendlyId::ActiveRecord2::Configuration","FriendlyId/ActiveRecord2/Configuration.html#method-i-scopes_over-3F","(klass)",""],["setup","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-setup","()",""],["setup","FriendlyId::Test::ScopedModelTest","FriendlyId/Test/ScopedModelTest.html#method-i-setup","()",""],["should","Object","Object.html#method-i-should","(name, &block)",""],["slug","FriendlyId::ActiveRecord2::SluggedModel","FriendlyId/ActiveRecord2/SluggedModel.html#method-i-slug","()","<p>The model instance&#39;s current {FriendlyId::ActiveRecord2::Slug slug}.\n"],["slug=","FriendlyId::ActiveRecord2::SluggedModel","FriendlyId/ActiveRecord2/SluggedModel.html#method-i-slug-3D","(slug)","<p>Set the slug.\n"],["slug?","FriendlyId::Slugged::Model","FriendlyId/Slugged/Model.html#method-i-slug-3F","()","<p>Does the instance have a slug?\n"],["slugs_included?","FriendlyId::ActiveRecord2::SluggedModel::SluggedFinder","FriendlyId/ActiveRecord2/SluggedModel/SluggedFinder.html#method-i-slugs_included-3F","()","<p>Whether :include =&gt; :slugs has been passed as an option.\n"],["status","FriendlyId::Test::ActiveRecord2::Simple::StatusTest","FriendlyId/Test/ActiveRecord2/Simple/StatusTest.html#method-i-status","()",""],["status","FriendlyId::Test::SluggedStatus","FriendlyId/Test/SluggedStatus.html#method-i-status","()",""],["strip_diacritics","FriendlyId::ActiveRecord2::DeprecatedSlugMethods","FriendlyId/ActiveRecord2/DeprecatedSlugMethods.html#method-i-strip_diacritics","(string)","<p>@deprecated Please use SlugString#approximate_ascii.“\n"],["strip_diacritics=","FriendlyId::Configuration","FriendlyId/Configuration.html#method-i-strip_diacritics-3D","(*args)","<p>This method will be removed from FriendlyId 3.0. @deprecated Please use\n{#approximate_ascii approximate_ascii …\n"],["strip_non_ascii","FriendlyId::ActiveRecord2::DeprecatedSlugMethods","FriendlyId/ActiveRecord2/DeprecatedSlugMethods.html#method-i-strip_non_ascii","(string)","<p>@deprecated Please use SlugString#to_ascii.\n"],["teardown","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-teardown","()",""],["teardown","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-teardown","()",""],["teardown","FriendlyId::Test::ScopedModelTest","FriendlyId/Test/ScopedModelTest.html#method-i-teardown","()",""],["teardown","FriendlyId::Test::SlugTest","FriendlyId/Test/SlugTest.html#method-i-teardown","()",""],["teardown","TasksTest","TasksTest.html#method-i-teardown","()",""],["test","Object","Object.html#method-i-test","(name, &block)",""],["to_ascii!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-to_ascii-21","()","<p>Delete any non-ascii characters. @return String\n"],["to_friendly_id","Slug","Slug.html#method-i-to_friendly_id","()",""],["to_param","FriendlyId::ActiveRecord2::SimpleModel","FriendlyId/ActiveRecord2/SimpleModel.html#method-i-to_param","()","<p>Returns the friendly id, or if none is available, the numeric id.\n"],["to_param","FriendlyId::ActiveRecord2::SluggedModel","FriendlyId/ActiveRecord2/SluggedModel.html#method-i-to_param","()","<p>Returns the friendly id, or if none is available, the numeric id.\n"],["truncate!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-truncate-21","(max)","<p>Truncate the string to <code>max</code> length. @return String\n"],["unfriendly?","FriendlyId::Finders::Base","FriendlyId/Finders/Base.html#method-c-unfriendly-3F","(id)","<p>Is the id numeric? @return [true, false, nil] <code>true</code> if\ndefinitely unfriendly, <code>false</code> if\n\n<pre>definitely friendly, ...</pre>\n"],["unfriendly?","FriendlyId::Finders::Single","FriendlyId/Finders/Single.html#method-i-unfriendly-3F","()","<p>Is the id definitely unfriendly? @see Finder::unfriendly?\n"],["up","CreateSlugs","CreateSlugs.html#method-c-up","()",""],["up","CreateSupportModels","CreateSupportModels.html#method-c-up","()",""],["upcase!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-upcase-21","()","<p>Upper-cases the string. Note that this works for Unicode strings, though\nyour milage may vary with Greek …\n"],["uses_friendly_id?","FriendlyId::Base","FriendlyId/Base.html#method-i-uses_friendly_id-3F","()","<p>Does the model class use the FriendlyId plugin?\n"],["validate_find_options","FriendlyId::ActiveRecord2::SluggedModel::FinderMethods","FriendlyId/ActiveRecord2/SluggedModel/FinderMethods.html#method-i-validate_find_options","(options)","<p>Since Rails goes out of its way to make these options completely\ninaccessible, we have to copy them here. …\n"],["validate_for!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-validate_for-21","(config)","<p>Validate that the slug string is not blank or reserved, and truncate it to\nthe max length if necessary. …\n"],["validate_name","Slug","Slug.html#method-i-validate_name","()","<p>Raise a FriendlyId::SlugGenerationError if the slug name is blank.\n"],["validate_uses_slugs","FriendlyId::TaskRunner","FriendlyId/TaskRunner.html#method-i-validate_uses_slugs","()",""],["validation_exceptions","FriendlyId::Test::ActiveRecord2::Core","FriendlyId/Test/ActiveRecord2/Core.html#method-i-validation_exceptions","()",""],["validation_exceptions","FriendlyId::Test::Generic","FriendlyId/Test/Generic.html#method-i-validation_exceptions","()",""],["with_dashes!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-with_dashes-21","()","<p>Replaces whitespace with dashes (“-”). @return String\n"],["word_chars!","FriendlyId::SlugString","FriendlyId/SlugString.html#method-i-word_chars-21","()","<p>Remove any non-word characters. @return String\n"],["Changelog","","Changelog_md.html","","<p>FriendlyId Changelog\n<p>We would like to think our many {file:Contributors contributors}\nfor\nsuggestions, ...\n"],["Contributors","","Contributors_md.html","","<p>We are grateful for many contributions from the Ruby and Rails\ncommunity,\nin particular from the following ...\n"],["Gemfile","","Gemfile.html","","<p>gem “mocha” gem “rails”, :git =&gt; “../rails/”\n"],["Guide","","Guide_md.html","","<p>FriendlyId Guide\n<p>Table of Contents\n{:toc}\n\n<p>Overview\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2008-2010 Norman Clarke, Adrian Mugnolo and Emilio Tagua.\n<p>Permission is hereby granted, …\n"],["README","","README_md.html","","<p>FriendlyId\n<p>FriendlyId is the “Swiss Army bulldozer” of slugging and permalink plugins\nfor\nRuby ...\n"],["Rakefile","","Rakefile.html","","<p>require “rake” require “rake/testtask” require “rake/gempackagetask”\nrequire …\n"],["README","","extras/README_txt.html","","<p>These templates are here to generate FriendlyId-enabled Rails apps for\ntesting. They are for developers, …\n"],["friendly_id.gemspec","","friendly_id_gemspec.html","","<p>require “lib/friendly_id/version”\n<p>spec = Gem::Specification.new do |s|\n\n<pre>s.name              = ...</pre>\n"],["friendly_id.rake","","lib/friendly_id/active_record2/tasks/friendly_id_rake.html","","<p>namespace :friendly_id do\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">desc</span> <span class=\"ruby-string\">&quot;Make slugs for a model.&quot;</span>\n<span class=\"ruby-identifier\">task</span> :<span class=\"ruby-identifier\">make_slugs</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">environment</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">FriendlyId</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TaskRunner</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">make_slugs</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}